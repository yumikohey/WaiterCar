{
  "_args": [
    [
      {
        "raw": "mvayngrib/rn-nodeify",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "mvayngrib/rn-nodeify",
        "spec": "github:mvayngrib/rn-nodeify",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:mvayngrib/rn-nodeify.git",
          "sshUrl": "git+ssh://git@github.com/mvayngrib/rn-nodeify.git",
          "httpsUrl": "git+https://github.com/mvayngrib/rn-nodeify.git",
          "gitUrl": "git://github.com/mvayngrib/rn-nodeify.git",
          "shortcut": "github:mvayngrib/rn-nodeify",
          "directUrl": "https://raw.githubusercontent.com/mvayngrib/rn-nodeify/master/package.json"
        }
      },
      "/Users/yumiko/Desktop/yumiko/WaiterCar"
    ]
  ],
  "_from": "mvayngrib/rn-nodeify",
  "_id": "rn-nodeify@7.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/rn-nodeify",
  "_phantomChildren": {
    "graceful-fs": "4.1.9",
    "jsonfile": "2.4.0",
    "rimraf": "2.5.4"
  },
  "_requested": {
    "raw": "mvayngrib/rn-nodeify",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "mvayngrib/rn-nodeify",
    "spec": "github:mvayngrib/rn-nodeify",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:mvayngrib/rn-nodeify.git",
      "sshUrl": "git+ssh://git@github.com/mvayngrib/rn-nodeify.git",
      "httpsUrl": "git+https://github.com/mvayngrib/rn-nodeify.git",
      "gitUrl": "git://github.com/mvayngrib/rn-nodeify.git",
      "shortcut": "github:mvayngrib/rn-nodeify",
      "directUrl": "https://raw.githubusercontent.com/mvayngrib/rn-nodeify/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "git://github.com/mvayngrib/rn-nodeify.git#2928ff784851bea8e8abbadb4b2c2d406b7954ba",
  "_shasum": "2603e45e0da1eb1249a09bbad09f17bb71275951",
  "_shrinkwrap": null,
  "_spec": "mvayngrib/rn-nodeify",
  "_where": "/Users/yumiko/Desktop/yumiko/WaiterCar",
  "bin": {
    "rn-nodeify": "./cmd.js"
  },
  "dependencies": {
    "deep-equal": "^1.0.0",
    "findit": "^2.0.0",
    "fs-extra": "^0.22.1",
    "minimist": "^1.1.2",
    "object.pick": "^1.1.1",
    "run-parallel": "^1.1.2",
    "semver": "^5.0.1",
    "xtend": "^4.0.0"
  },
  "description": "Run after npm install and you can use node core modules and npm modules that use them in your React Native app.",
  "devDependencies": {},
  "gitHead": "2928ff784851bea8e8abbadb4b2c2d406b7954ba",
  "license": "MIT",
  "name": "rn-nodeify",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "# rn-nodeify\n\nRun after npm install and you can use node core modules and npm modules that use them in your React Native app.\n\n## Usage\n\n```bash\nrn-nodeify <options>\n```\n\n## Options\n\n```\n--install     install node core shims (default: install all), fix the \"browser\" \n              (later \"react-native\") fields in the package.json's of dependencies\n--hack        hack individual packages that are known to make the React Native packager choke\n```\n\n### Examples\n\n```bash\n# install all shims and run package-specific hacks\nrn-nodeify --install --hack\n```\n\n```bash\n# install specific shims\nrn-nodeify --install \"fs,dgram,process,path,console\"\n```\n\n```bash\n# install specific shims and hack\nrn-nodeify --install \"fs,dgram,process,path,console\" --hack\n```\n\nIt is recommended to add this command to the \"postinstall\" script in your project's package.json\n\n```json\n\"scripts\": {\n  \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n  \"postinstall\": \"rn-nodeify --install fs,dgram,process,path,console --hack\"\n}\n```\n\nrn-nodeify will create a `shim.js` file in your project root directory. The first line in index.ios.js / index.android.js should be to `import` it (NOT `require` it!)\n\n```js\nimport './shim'\n```\n\n### Example Apps / Workflows\n\n* the [react-native-crypto](https://github.com/mvayngrib/react-native-crypto) package has an example workflow for using crypto in a React Native app\n* this [example React Native app](https://github.com/mvayngrib/adexample) shows how you can use [levelup](https://github.com/Level/levelup) in React Native\n\n### Example Workflow\n\ncopied from [react-native-crypto](https://github.com/mvayngrib/react-native-crypto)\n\n1. Install and shim\n  ```sh\n  npm i --save react-native-crypto\n  # install peer deps\n  npm i --save react-native-randombytes\n  react-native link react-native-randombytes\n  # install latest rn-nodeify\n  npm i --save-dev mvayngrib/rn-nodeify\n  # install node core shims and recursively hack package.json files\n  # in ./node_modules to add/update the \"browser\"/\"react-native\" field with relevant mappings\n  ./node_modules/.bin/rn-nodeify --hack --install\n  ```\n\n2. `rn-nodeify` will create a `shim.js` in the project root directory\n  ```js\n  // index.ios.js or index.android.js\n  // make sure you use `import` and not `require`!\n  import './shim.js'\n  // ...the rest of your code\n  import crypto from 'crypto'\n  // use crypto\n  console.log(crypto.randomBytes(32).toString('hex'))\n  ```\n\n## Please note...\n\n- rn-nodeify won't work with modules that are added using `npm link`.\n- modules that contain a .babelrc will cause problems with the latest react-native version (0.20 at this time), remove them after installation (`rm node_modules/*/.babelrc`)\n- when installing a package from git, the postinstall hook isn't triggered, run it manually instead (`npm run postinstall`)\n- restart the react-native packager after installing a module!\n- removing the packager cache helps as well sometimes (`rm -fr $TMPDIR/react-*`)\n",
  "readmeFilename": "readme.md",
  "version": "7.0.0",
  "react-native": {
    "zlib": "browserify-zlib",
    "console": "console-browserify",
    "constants": "constants-browserify",
    "crypto": "react-native-crypto",
    "dns": "dns.js",
    "net": "react-native-tcp",
    "domain": "domain-browser",
    "http": "react-native-http",
    "https": "https-browserify",
    "os": "os-browserify",
    "path": "path-browserify",
    "querystring": "querystring-es3",
    "fs": "react-native-level-fs",
    "_stream_transform": "readable-stream/transform",
    "_stream_readable": "readable-stream/readable",
    "_stream_writable": "readable-stream/writable",
    "_stream_duplex": "readable-stream/duplex",
    "_stream_passthrough": "readable-stream/passthrough",
    "dgram": "react-native-udp",
    "stream": "stream-browserify",
    "timers": "timers-browserify",
    "tty": "tty-browserify",
    "vm": "vm-browserify"
  },
  "browser": {
    "zlib": "browserify-zlib",
    "console": "console-browserify",
    "constants": "constants-browserify",
    "crypto": "react-native-crypto",
    "dns": "dns.js",
    "net": "react-native-tcp",
    "domain": "domain-browser",
    "http": "react-native-http",
    "https": "https-browserify",
    "os": "os-browserify",
    "path": "path-browserify",
    "querystring": "querystring-es3",
    "fs": "react-native-level-fs",
    "_stream_transform": "readable-stream/transform",
    "_stream_readable": "readable-stream/readable",
    "_stream_writable": "readable-stream/writable",
    "_stream_duplex": "readable-stream/duplex",
    "_stream_passthrough": "readable-stream/passthrough",
    "dgram": "react-native-udp",
    "stream": "stream-browserify",
    "timers": "timers-browserify",
    "tty": "tty-browserify",
    "vm": "vm-browserify"
  }
}